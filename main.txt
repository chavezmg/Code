/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
// PROTOTIPO DE FUNCIONES
void * activarSalidas(uint8_t[]);
void * lecturasDigitales(uint8_t[]);
void ADC_Select_CH0(void);
void ADC_Select_CH1(void);
void ADC_Select_CH2(void);
void ADC_Select_CH3(void);
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t dataserial2[9]; //este vector recibe los datos por el puerto serie
uint8_t byte;
uint8_t sal[8];
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */


  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  MX_ADC1_Init();
  float analog[4];	//este vector guarda las lecturas analogicas
  //HAL_ADC_Start_DMA(&hadc1, analog, 4);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART3_UART_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  char buffer[100];

  uint8_t entradas[8]; //este vector guarda el estado de las entradas digitales y analogicas, para enviar por serial

  uint8_t ok[] = "ok\n";	//esto se manda cuando se establece la coneccion
  //uint8_t sal[8];	//este vector es el que contiene la informacion que activa salidas
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart3, ok, sizeof(ok), HAL_MAX_DELAY);
  //HAL_UART_Receive_IT(&huart3, &byte, 1);
  HAL_UART_Receive_IT(&huart3, dataserial2, 9);
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ADC_Select_CH0();
	  HAL_ADC_Start(&hadc1);
	  HAL_ADC_PollForConversion(&hadc1, 1000);
	  analog[0] = HAL_ADC_GetValue(&hadc1);
	  HAL_ADC_Stop(&hadc1);

	  ADC_Select_CH1();
	  HAL_ADC_Start(&hadc1);
	  HAL_ADC_PollForConversion(&hadc1, 1000);
	  analog[1] = HAL_ADC_GetValue(&hadc1);
	  HAL_ADC_Stop(&hadc1);

	  ADC_Select_CH2();
	  HAL_ADC_Start(&hadc1);
	  HAL_ADC_PollForConversion(&hadc1, 1000);
	  analog[2] = HAL_ADC_GetValue(&hadc1);
	  HAL_ADC_Stop(&hadc1);

	  ADC_Select_CH3();
	  HAL_ADC_Start(&hadc1);
	  HAL_ADC_PollForConversion(&hadc1, 1000);
	  analog[3] = HAL_ADC_GetValue(&hadc1);
	  HAL_ADC_Stop(&hadc1);

	  lecturasDigitales(entradas);

	  /*entradas[1] = 1; //debug
	  analog[0] = 350;
	  analog[1] = 450;
	  analog[2] = 550;
	  analog[3] = 650;
	  sal[0] = 1;
	  sal[1] = 1;
	  sal[2] = 1;
	  sal[3] = 1;*/

	  char a0[5] = {""};	 // string que guarda la entrada analogica 0
	  char a1[5] = {""};
	  char a2[5] = {""};
	  char a3[5] = {""};

	  for (int j=0; j<8; j++){
		  if(entradas[j] == 0){
			  strcat(buffer, "0,");
		  }
		  else{
			  strcat(buffer, "1,");
		  }
	  }

	  sprintf(a0, "%.f,", analog[0]);	//convertimos el valor de la entrada analogica en string y lo guardamos en a0
	  sprintf(a1, "%.f,", analog[1]);
	  sprintf(a2, "%.f,", analog[2]);
	  sprintf(a3, "%.f,", analog[3]);

	  strcat(buffer, a0);
	  strcat(buffer, a3);
	  strcat(buffer, a2);
	  strcat(buffer, a1);

	  for (int j=0; j<8; j++){
	  		  if(sal[j] == 0){
	  			  strcat(buffer, "0,");
	  		  }
	  		  else{
	  			  strcat(buffer, "1,");
	  		  }
	  }

	  strcat(buffer, "\n\r");

	  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
	  for(int i=0; i<100; i++){	//limpiamos el buffer que recibe datos
	 	 buffer[i] = '\0';
	  }

  }//while end
  /* USER CODE END 3 */
}//main end

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  /*sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }*/

  /** Configure Regular Channel
  */
  /*sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  } */

  /** Configure Regular Channel
  */
  /*sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  } */

  /** Configure Regular Channel
  */
  /*sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = ADC_REGULAR_RANK_4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }*/
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 9600;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, salida8_Pin|salida7_Pin|salida6_Pin|salida5_Pin
                          |salida1_Pin|salida2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, salida3_Pin|salida4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : salida8_Pin salida7_Pin salida6_Pin salida5_Pin
                           salida1_Pin salida2_Pin */
  GPIO_InitStruct.Pin = salida8_Pin|salida7_Pin|salida6_Pin|salida5_Pin
                          |salida1_Pin|salida2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : entrada1_Pin entrada2_Pin entrada3_Pin entrada4_Pin
                           entrada5_Pin entrada6_Pin entrada7_Pin entrada8_Pin */
  GPIO_InitStruct.Pin = entrada1_Pin|entrada2_Pin|entrada3_Pin|entrada4_Pin
                          |entrada5_Pin|entrada6_Pin|entrada7_Pin|entrada8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : salida3_Pin salida4_Pin */
  GPIO_InitStruct.Pin = salida3_Pin|salida4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

void * activarSalidas(uint8_t sal[]){	//esta funcion activa las salidas

	if(sal[0] == 0){
		HAL_GPIO_WritePin(salida1_GPIO_Port, salida1_Pin, GPIO_PIN_RESET);}
	if(sal[0] == 1){
		HAL_GPIO_WritePin(salida1_GPIO_Port, salida1_Pin, GPIO_PIN_SET);}
	if(sal[1] == 0){
		HAL_GPIO_WritePin(salida2_GPIO_Port, salida2_Pin, GPIO_PIN_RESET);}
	if(sal[1] == 1){
		HAL_GPIO_WritePin(salida2_GPIO_Port, salida2_Pin, GPIO_PIN_SET);}
	if(sal[2] == 0){
		HAL_GPIO_WritePin(salida3_GPIO_Port, salida3_Pin, GPIO_PIN_RESET);}
	if(sal[2] == 1){
		HAL_GPIO_WritePin(salida3_GPIO_Port, salida3_Pin, GPIO_PIN_SET);}
	if(sal[3] == 0){
		HAL_GPIO_WritePin(salida4_GPIO_Port, salida4_Pin, GPIO_PIN_RESET);}
	if(sal[3] == 1){
		HAL_GPIO_WritePin(salida4_GPIO_Port, salida4_Pin, GPIO_PIN_SET);}
	if(sal[4] == 0){
		HAL_GPIO_WritePin(salida5_GPIO_Port, salida5_Pin, GPIO_PIN_RESET);}
	if(sal[4] == 1){
		HAL_GPIO_WritePin(salida5_GPIO_Port, salida5_Pin, GPIO_PIN_SET);}
	if(sal[5] == 0){
		HAL_GPIO_WritePin(salida6_GPIO_Port, salida6_Pin, GPIO_PIN_RESET);}
	if(sal[5] == 1){
		HAL_GPIO_WritePin(salida6_GPIO_Port, salida6_Pin, GPIO_PIN_SET);}
	if(sal[6] == 0){
		HAL_GPIO_WritePin(salida7_GPIO_Port, salida7_Pin, GPIO_PIN_RESET);}
	if(sal[6] == 1){
		HAL_GPIO_WritePin(salida7_GPIO_Port, salida7_Pin, GPIO_PIN_SET);}
	if(sal[7] == 0){
		HAL_GPIO_WritePin(salida8_GPIO_Port, salida8_Pin, GPIO_PIN_RESET);}
	if(sal[7] == 1){
		HAL_GPIO_WritePin(salida8_GPIO_Port, salida8_Pin, GPIO_PIN_SET);}

	return 0;
}

void * lecturasDigitales(uint8_t entradas[]){
	entradas[0] = HAL_GPIO_ReadPin(entrada1_GPIO_Port, entrada1_Pin);
	entradas[1] = HAL_GPIO_ReadPin(entrada2_GPIO_Port, entrada2_Pin);
	entradas[2] = HAL_GPIO_ReadPin(entrada3_GPIO_Port, entrada3_Pin);
	entradas[3] = HAL_GPIO_ReadPin(entrada4_GPIO_Port, entrada4_Pin);
	entradas[4] = HAL_GPIO_ReadPin(entrada5_GPIO_Port, entrada5_Pin);
	entradas[5] = HAL_GPIO_ReadPin(entrada6_GPIO_Port, entrada6_Pin);
	entradas[6] = HAL_GPIO_ReadPin(entrada7_GPIO_Port, entrada7_Pin);
	entradas[7] = HAL_GPIO_ReadPin(entrada8_GPIO_Port, entrada8_Pin); //configurar los pines
	return 0;
}


void ADC_Select_CH0(void){
	ADC_ChannelConfTypeDef sConfig = {0};
	sConfig.Channel = ADC_CHANNEL_0;
	sConfig.Rank = 1;
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
		Error_Handler();
	}
	HAL_Delay(50);
}

void ADC_Select_CH1(void){
	ADC_ChannelConfTypeDef sConfig = {0};
	sConfig.Channel = ADC_CHANNEL_1;
	sConfig.Rank = 1;
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
		Error_Handler();
	}
	HAL_Delay(50);
}

void ADC_Select_CH2(void){
	ADC_ChannelConfTypeDef sConfig = {0};
	sConfig.Channel = ADC_CHANNEL_2;
	sConfig.Rank = 1;
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
		Error_Handler();
	}
	HAL_Delay(50);
}

void ADC_Select_CH3(void){
	ADC_ChannelConfTypeDef sConfig = {0};
	sConfig.Channel = ADC_CHANNEL_3;
	sConfig.Rank = 1;
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
		Error_Handler();
	}
	HAL_Delay(50);
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	//este funcion se ejecuta cuando se reciben datos
	//HAL_UART_Receive(&huart3, dataserial2, 9, HAL_MAX_DELAY);
	//HAL_UART_Transmit(&huart3, dataserial2, 8, 100);
	if(sizeof(dataserial2)==9){
		sal[0] = dataserial2[0]=='0'? 0:1;
		sal[1] = dataserial2[1]=='0'? 0:1;
		sal[2] = dataserial2[2]=='0'? 0:1;
		sal[3] = dataserial2[3]=='0'? 0:1;
		sal[4] = dataserial2[4]=='0'? 0:1;
		sal[5] = dataserial2[5]=='0'? 0:1;
		sal[6] = dataserial2[6]=='0'? 0:1;
		sal[7] = dataserial2[7]=='0'? 0:1;
		activarSalidas(sal);
	}

	//HAL_UART_Transmit(&huart3, dataserial2, 8, 100); //debug
	HAL_UART_Receive_IT(&huart3, dataserial2, 9);

}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
